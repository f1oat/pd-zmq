#N canvas 535 98 992 408 10;
#X msg 93 264 about;
#X msg 92 243 version;
#X msg 61 121 socket push;
#X msg 73 138 socket pull;
#X msg 88 159 socket request;
#X msg 100 176 socket reply;
#X floatatom 162 340 8 0 0 0 - - -, f 8;
#X msg 211 281 bang;
#X symbolatom 218 340 30 0 0 0 - - -, f 30;
#X msg 116 200 close;
#X msg 246 107 connect tcp://127.0.0.1:6001;
#X msg 286 201 start_receive;
#X msg 286 218 stop_receive;
#X text 382 197 -> start/stop the receive loop. some socket types do
not support this \, some require it. after sending a REQ for instance
you must receive the result.;
#X msg 287 264 receive;
#X msg 246 124 disconnect tcp://127.0.0.1:6001;
#X msg 246 155 bind tcp://127.0.0.1:6001;
#X msg 246 172 unbind tcp://127.0.0.1:6001;
#X text 52 18 Ã¸mq api: http://api.zeromq.org/3-2:_start;
#X text 365 265 receive just one message;
#X obj 162 281 zmq;
#X obj 122 316 print;
#X text 250 282 send empty message \, received as bang. can be used
for signalling/heartbeat;
#X msg 162 75 send \$1;
#X floatatom 162 53 5 0 0 0 - - -, f 5;
#X msg 224 75 send symbol <message>;
#X floatatom 252 385 5 0 0 0 - - -, f 5;
#X floatatom 286 385 5 0 0 0 - - -, f 5;
#X floatatom 321 385 5 0 0 0 - - -, f 5;
#X obj 162 315 route float symbol list;
#X msg 223 47 send 23 25 42;
#X obj 252 363 unpack 0 1 2;
#X connect 0 0 20 0;
#X connect 1 0 20 0;
#X connect 2 0 20 0;
#X connect 3 0 20 0;
#X connect 4 0 20 0;
#X connect 5 0 20 0;
#X connect 7 0 20 0;
#X connect 9 0 20 0;
#X connect 10 0 20 0;
#X connect 11 0 20 0;
#X connect 12 0 20 0;
#X connect 14 0 20 0;
#X connect 15 0 20 0;
#X connect 16 0 20 0;
#X connect 17 0 20 0;
#X connect 20 0 21 0;
#X connect 20 0 29 0;
#X connect 23 0 20 0;
#X connect 24 0 23 0;
#X connect 25 0 20 0;
#X connect 29 0 6 0;
#X connect 29 1 8 0;
#X connect 29 2 31 0;
#X connect 30 0 20 0;
#X connect 31 0 26 0;
#X connect 31 1 27 0;
#X connect 31 2 28 0;
