#N canvas 533 91 1019 546 10;
#X msg 93 314 about;
#X msg 92 293 version;
#X msg 61 171 socket push;
#X msg 73 188 socket pull;
#X msg 88 209 socket request;
#X msg 100 226 socket reply;
#X floatatom 162 390 8 0 0 0 - - -, f 8;
#X msg 211 331 bang;
#X symbolatom 218 390 30 0 0 0 - - -, f 30;
#X msg 116 250 close;
#X msg 246 157 connect tcp://127.0.0.1:6001;
#X msg 286 251 start_receive;
#X msg 286 268 stop_receive;
#X text 382 247 -> start/stop the receive loop. some socket types do
not support this \, some require it. after sending a REQ for instance
you must receive the result.;
#X msg 287 314 receive;
#X msg 246 174 disconnect tcp://127.0.0.1:6001;
#X msg 246 205 bind tcp://127.0.0.1:6001;
#X msg 246 222 unbind tcp://127.0.0.1:6001;
#X text 52 68 Ã¸mq api: http://api.zeromq.org/3-2:_start;
#X text 365 315 receive just one message;
#X obj 162 331 zmq;
#X obj 122 366 print;
#X text 250 332 send empty message \, received as bang. can be used
for signalling/heartbeat;
#X msg 162 125 send \$1;
#X floatatom 162 103 5 0 0 0 - - -, f 5;
#X msg 224 125 send symbol <message>;
#X floatatom 252 435 5 0 0 0 - - -, f 5;
#X floatatom 286 435 5 0 0 0 - - -, f 5;
#X floatatom 321 435 5 0 0 0 - - -, f 5;
#X obj 162 365 route float symbol list;
#X msg 223 97 send 23 25 42;
#X obj 252 413 unpack 0 1 2;
#X text 53 15 provides access to the zeromq api. so far it can only
take part in PUSH/PULL \, REQ/REPL and PUB/SUB pattern.;
#X connect 0 0 20 0;
#X connect 1 0 20 0;
#X connect 2 0 20 0;
#X connect 3 0 20 0;
#X connect 4 0 20 0;
#X connect 5 0 20 0;
#X connect 7 0 20 0;
#X connect 9 0 20 0;
#X connect 10 0 20 0;
#X connect 11 0 20 0;
#X connect 12 0 20 0;
#X connect 14 0 20 0;
#X connect 15 0 20 0;
#X connect 16 0 20 0;
#X connect 17 0 20 0;
#X connect 20 0 21 0;
#X connect 20 0 29 0;
#X connect 23 0 20 0;
#X connect 24 0 23 0;
#X connect 25 0 20 0;
#X connect 29 0 6 0;
#X connect 29 1 8 0;
#X connect 29 2 31 0;
#X connect 30 0 20 0;
#X connect 31 0 26 0;
#X connect 31 1 27 0;
#X connect 31 2 28 0;
